{"ast":null,"code":"\"use strict\";\n\nconst Options = require(\"./options\");\n\nmodule.exports = normalizeArgs;\n/**\n * Normalizes the given arguments, accounting for optional args.\n *\n * @param {Arguments} args\n * @returns {object}\n */\n\nfunction normalizeArgs(args) {\n  let path, schema, options, callback;\n  args = Array.prototype.slice.call(args);\n\n  if (typeof args[args.length - 1] === \"function\") {\n    // The last parameter is a callback function\n    callback = args.pop();\n  }\n\n  if (typeof args[0] === \"string\") {\n    // The first parameter is the path\n    path = args[0];\n\n    if (typeof args[2] === \"object\") {\n      // The second parameter is the schema, and the third parameter is the options\n      schema = args[1];\n      options = args[2];\n    } else {\n      // The second parameter is the options\n      schema = undefined;\n      options = args[1];\n    }\n  } else {\n    // The first parameter is the schema\n    path = \"\";\n    schema = args[0];\n    options = args[1];\n  }\n\n  if (!(options instanceof Options)) {\n    options = new Options(options);\n  }\n\n  return {\n    path,\n    schema,\n    options,\n    callback\n  };\n}","map":{"version":3,"names":["Options","require","module","exports","normalizeArgs","args","path","schema","options","callback","Array","prototype","slice","call","length","pop","undefined"],"sources":["/Users/abdulmutaalazhar/Desktop/Folders/ensembleUi/schema-test1/node_modules/@apidevtools/json-schema-ref-parser/lib/normalize-args.js"],"sourcesContent":["\"use strict\";\n\nconst Options = require(\"./options\");\n\nmodule.exports = normalizeArgs;\n\n/**\n * Normalizes the given arguments, accounting for optional args.\n *\n * @param {Arguments} args\n * @returns {object}\n */\nfunction normalizeArgs (args) {\n  let path, schema, options, callback;\n  args = Array.prototype.slice.call(args);\n\n  if (typeof args[args.length - 1] === \"function\") {\n    // The last parameter is a callback function\n    callback = args.pop();\n  }\n\n  if (typeof args[0] === \"string\") {\n    // The first parameter is the path\n    path = args[0];\n    if (typeof args[2] === \"object\") {\n      // The second parameter is the schema, and the third parameter is the options\n      schema = args[1];\n      options = args[2];\n    }\n    else {\n      // The second parameter is the options\n      schema = undefined;\n      options = args[1];\n    }\n  }\n  else {\n    // The first parameter is the schema\n    path = \"\";\n    schema = args[0];\n    options = args[1];\n  }\n\n  if (!(options instanceof Options)) {\n    options = new Options(options);\n  }\n\n  return {\n    path,\n    schema,\n    options,\n    callback\n  };\n}\n"],"mappings":"AAAA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,WAAD,CAAvB;;AAEAC,MAAM,CAACC,OAAP,GAAiBC,aAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASA,aAAT,CAAwBC,IAAxB,EAA8B;EAC5B,IAAIC,IAAJ,EAAUC,MAAV,EAAkBC,OAAlB,EAA2BC,QAA3B;EACAJ,IAAI,GAAGK,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BR,IAA3B,CAAP;;EAEA,IAAI,OAAOA,IAAI,CAACA,IAAI,CAACS,MAAL,GAAc,CAAf,CAAX,KAAiC,UAArC,EAAiD;IAC/C;IACAL,QAAQ,GAAGJ,IAAI,CAACU,GAAL,EAAX;EACD;;EAED,IAAI,OAAOV,IAAI,CAAC,CAAD,CAAX,KAAmB,QAAvB,EAAiC;IAC/B;IACAC,IAAI,GAAGD,IAAI,CAAC,CAAD,CAAX;;IACA,IAAI,OAAOA,IAAI,CAAC,CAAD,CAAX,KAAmB,QAAvB,EAAiC;MAC/B;MACAE,MAAM,GAAGF,IAAI,CAAC,CAAD,CAAb;MACAG,OAAO,GAAGH,IAAI,CAAC,CAAD,CAAd;IACD,CAJD,MAKK;MACH;MACAE,MAAM,GAAGS,SAAT;MACAR,OAAO,GAAGH,IAAI,CAAC,CAAD,CAAd;IACD;EACF,CAbD,MAcK;IACH;IACAC,IAAI,GAAG,EAAP;IACAC,MAAM,GAAGF,IAAI,CAAC,CAAD,CAAb;IACAG,OAAO,GAAGH,IAAI,CAAC,CAAD,CAAd;EACD;;EAED,IAAI,EAAEG,OAAO,YAAYR,OAArB,CAAJ,EAAmC;IACjCQ,OAAO,GAAG,IAAIR,OAAJ,CAAYQ,OAAZ,CAAV;EACD;;EAED,OAAO;IACLF,IADK;IAELC,MAFK;IAGLC,OAHK;IAILC;EAJK,CAAP;AAMD"},"metadata":{},"sourceType":"script"}