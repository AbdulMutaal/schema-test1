{"ast":null,"code":"import { format } from \"./isomorphic.node\";\n/**\n * Normalizes Ono options, accounting for defaults and optional options.\n */\n\nexport function normalizeOptions(options) {\n  options = options || {};\n  return {\n    concatMessages: options.concatMessages === undefined ? true : Boolean(options.concatMessages),\n    format: options.format === undefined ? format : typeof options.format === \"function\" ? options.format : false\n  };\n}\n/**\n * Normalizes the Ono arguments, accounting for defaults, options, and optional arguments.\n */\n\nexport function normalizeArgs(args, options) {\n  let originalError;\n  let props;\n  let formatArgs;\n  let message = \"\"; // Determine which arguments were actually specified\n\n  if (typeof args[0] === \"string\") {\n    formatArgs = args;\n  } else if (typeof args[1] === \"string\") {\n    if (args[0] instanceof Error) {\n      originalError = args[0];\n    } else {\n      props = args[0];\n    }\n\n    formatArgs = args.slice(1);\n  } else {\n    originalError = args[0];\n    props = args[1];\n    formatArgs = args.slice(2);\n  } // If there are any format arguments, then format the error message\n\n\n  if (formatArgs.length > 0) {\n    if (options.format) {\n      message = options.format.apply(undefined, formatArgs);\n    } else {\n      message = formatArgs.join(\" \");\n    }\n  }\n\n  if (options.concatMessages && originalError && originalError.message) {\n    // The inner-error's message will be added to the new message\n    message += (message ? \" \\n\" : \"\") + originalError.message;\n  }\n\n  return {\n    originalError,\n    props,\n    message\n  };\n}","map":{"version":3,"mappings":"AAAA,SAASA,MAAT,QAAuB,mBAAvB;AAGA;;;;AAGA,OAAM,SAAUC,gBAAV,CAA2BC,OAA3B,EAA+C;EACnDA,OAAO,GAAGA,OAAO,IAAI,EAArB;EACA,OAAO;IACLC,cAAc,EAAED,OAAO,CAACC,cAAR,KAA2BC,SAA3B,GAAuC,IAAvC,GAA8CC,OAAO,CAACH,OAAO,CAACC,cAAT,CADhE;IAELH,MAAM,EAAEE,OAAO,CAACF,MAAR,KAAmBI,SAAnB,GAA+BJ,MAA/B,GACH,OAAOE,OAAO,CAACF,MAAf,KAA0B,UAA1B,GAAuCE,OAAO,CAACF,MAA/C,GAAwD;EAHxD,CAAP;AAKD;AAED;;;;AAGA,OAAM,SAAUM,aAAV,CAA+DC,IAA/D,EAAgFL,OAAhF,EAAmG;EACvG,IAAIM,aAAJ;EACA,IAAIC,KAAJ;EACA,IAAIC,UAAJ;EACA,IAAIC,OAAO,GAAG,EAAd,CAJuG,CAMvG;;EACA,IAAI,OAAOJ,IAAI,CAAC,CAAD,CAAX,KAAmB,QAAvB,EAAiC;IAC/BG,UAAU,GAAGH,IAAb;EACD,CAFD,MAGK,IAAI,OAAOA,IAAI,CAAC,CAAD,CAAX,KAAmB,QAAvB,EAAiC;IACpC,IAAIA,IAAI,CAAC,CAAD,CAAJ,YAAmBK,KAAvB,EAA8B;MAC5BJ,aAAa,GAAGD,IAAI,CAAC,CAAD,CAApB;IACD,CAFD,MAGK;MACHE,KAAK,GAAGF,IAAI,CAAC,CAAD,CAAZ;IACD;;IACDG,UAAU,GAAGH,IAAI,CAACM,KAAL,CAAW,CAAX,CAAb;EACD,CARI,MASA;IACHL,aAAa,GAAGD,IAAI,CAAC,CAAD,CAApB;IACAE,KAAK,GAAGF,IAAI,CAAC,CAAD,CAAZ;IACAG,UAAU,GAAGH,IAAI,CAACM,KAAL,CAAW,CAAX,CAAb;EACD,CAvBsG,CAyBvG;;;EACA,IAAIH,UAAU,CAACI,MAAX,GAAoB,CAAxB,EAA2B;IACzB,IAAIZ,OAAO,CAACF,MAAZ,EAAoB;MAClBW,OAAO,GAAGT,OAAO,CAACF,MAAR,CAAee,KAAf,CAAqBX,SAArB,EAAgCM,UAAhC,CAAV;IACD,CAFD,MAGK;MACHC,OAAO,GAAGD,UAAU,CAACM,IAAX,CAAgB,GAAhB,CAAV;IACD;EACF;;EAED,IAAId,OAAO,CAACC,cAAR,IAA0BK,aAA1B,IAA2CA,aAAa,CAACG,OAA7D,EAAsE;IACpE;IACAA,OAAO,IAAI,CAACA,OAAO,GAAG,KAAH,GAAW,EAAnB,IAAyBH,aAAa,CAACG,OAAlD;EACD;;EAED,OAAO;IAAEH,aAAF;IAAiBC,KAAjB;IAAwBE;EAAxB,CAAP;AACD","names":["format","normalizeOptions","options","concatMessages","undefined","Boolean","normalizeArgs","args","originalError","props","formatArgs","message","Error","slice","length","apply","join"],"sources":["../src/normalize.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}