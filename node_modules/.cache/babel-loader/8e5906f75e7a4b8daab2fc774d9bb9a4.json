{"ast":null,"code":"\"use strict\";\n\nconst {\n  ParserError\n} = require(\"../util/errors\");\n\nconst yaml = require(\"js-yaml\");\n\nmodule.exports = {\n  /**\n   * The order that this parser will run, in relation to other parsers.\n   *\n   * @type {number}\n   */\n  order: 200,\n\n  /**\n   * Whether to allow \"empty\" files. This includes zero-byte files, as well as empty JSON objects.\n   *\n   * @type {boolean}\n   */\n  allowEmpty: true,\n\n  /**\n   * Determines whether this parser can parse a given file reference.\n   * Parsers that match will be tried, in order, until one successfully parses the file.\n   * Parsers that don't match will be skipped, UNLESS none of the parsers match, in which case\n   * every parser will be tried.\n   *\n   * @type {RegExp|string[]|function}\n   */\n  canParse: [\".yaml\", \".yml\", \".json\"],\n\n  // JSON is valid YAML\n\n  /**\n   * Parses the given file as YAML\n   *\n   * @param {object} file           - An object containing information about the referenced file\n   * @param {string} file.url       - The full URL of the referenced file\n   * @param {string} file.extension - The lowercased file extension (e.g. \".txt\", \".html\", etc.)\n   * @param {*}      file.data      - The file contents. This will be whatever data type was returned by the resolver\n   * @returns {Promise}\n   */\n  async parse(file) {\n    // eslint-disable-line require-await\n    let data = file.data;\n\n    if (Buffer.isBuffer(data)) {\n      data = data.toString();\n    }\n\n    if (typeof data === \"string\") {\n      try {\n        return yaml.load(data);\n      } catch (e) {\n        throw new ParserError(e.message, file.url);\n      }\n    } else {\n      // data is already a JavaScript value (object, array, number, null, NaN, etc.)\n      return data;\n    }\n  }\n\n};","map":{"version":3,"names":["ParserError","require","yaml","module","exports","order","allowEmpty","canParse","parse","file","data","Buffer","isBuffer","toString","load","e","message","url"],"sources":["/Users/abdulmutaalazhar/Desktop/Folders/ensembleUi/schema-test1/node_modules/@apidevtools/json-schema-ref-parser/lib/parsers/yaml.js"],"sourcesContent":["\"use strict\";\n\nconst { ParserError } = require(\"../util/errors\");\nconst yaml = require(\"js-yaml\");\n\nmodule.exports = {\n  /**\n   * The order that this parser will run, in relation to other parsers.\n   *\n   * @type {number}\n   */\n  order: 200,\n\n  /**\n   * Whether to allow \"empty\" files. This includes zero-byte files, as well as empty JSON objects.\n   *\n   * @type {boolean}\n   */\n  allowEmpty: true,\n\n  /**\n   * Determines whether this parser can parse a given file reference.\n   * Parsers that match will be tried, in order, until one successfully parses the file.\n   * Parsers that don't match will be skipped, UNLESS none of the parsers match, in which case\n   * every parser will be tried.\n   *\n   * @type {RegExp|string[]|function}\n   */\n  canParse: [\".yaml\", \".yml\", \".json\"],  // JSON is valid YAML\n\n  /**\n   * Parses the given file as YAML\n   *\n   * @param {object} file           - An object containing information about the referenced file\n   * @param {string} file.url       - The full URL of the referenced file\n   * @param {string} file.extension - The lowercased file extension (e.g. \".txt\", \".html\", etc.)\n   * @param {*}      file.data      - The file contents. This will be whatever data type was returned by the resolver\n   * @returns {Promise}\n   */\n  async parse (file) {      // eslint-disable-line require-await\n    let data = file.data;\n    if (Buffer.isBuffer(data)) {\n      data = data.toString();\n    }\n\n    if (typeof data === \"string\") {\n      try {\n        return yaml.load(data);\n      }\n      catch (e) {\n        throw new ParserError(e.message, file.url);\n      }\n    }\n    else {\n      // data is already a JavaScript value (object, array, number, null, NaN, etc.)\n      return data;\n    }\n  }\n};\n"],"mappings":"AAAA;;AAEA,MAAM;EAAEA;AAAF,IAAkBC,OAAO,CAAC,gBAAD,CAA/B;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,SAAD,CAApB;;AAEAE,MAAM,CAACC,OAAP,GAAiB;EACf;AACF;AACA;AACA;AACA;EACEC,KAAK,EAAE,GANQ;;EAQf;AACF;AACA;AACA;AACA;EACEC,UAAU,EAAE,IAbG;;EAef;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,QAAQ,EAAE,CAAC,OAAD,EAAU,MAAV,EAAkB,OAAlB,CAvBK;;EAuBwB;;EAEvC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMC,KAAN,CAAaC,IAAb,EAAmB;IAAO;IACxB,IAAIC,IAAI,GAAGD,IAAI,CAACC,IAAhB;;IACA,IAAIC,MAAM,CAACC,QAAP,CAAgBF,IAAhB,CAAJ,EAA2B;MACzBA,IAAI,GAAGA,IAAI,CAACG,QAAL,EAAP;IACD;;IAED,IAAI,OAAOH,IAAP,KAAgB,QAApB,EAA8B;MAC5B,IAAI;QACF,OAAOR,IAAI,CAACY,IAAL,CAAUJ,IAAV,CAAP;MACD,CAFD,CAGA,OAAOK,CAAP,EAAU;QACR,MAAM,IAAIf,WAAJ,CAAgBe,CAAC,CAACC,OAAlB,EAA2BP,IAAI,CAACQ,GAAhC,CAAN;MACD;IACF,CAPD,MAQK;MACH;MACA,OAAOP,IAAP;IACD;EACF;;AApDc,CAAjB"},"metadata":{},"sourceType":"script"}