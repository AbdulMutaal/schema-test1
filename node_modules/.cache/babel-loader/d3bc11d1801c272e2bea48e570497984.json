{"ast":null,"code":"import { addInspectMethod } from \"./isomorphic.node\";\nimport { isLazyStack, isWritableStack, joinStacks, lazyJoinStacks } from \"./stack\";\nimport { getDeepKeys, toJSON } from \"./to-json\";\nconst protectedProps = [\"name\", \"message\", \"stack\"];\n/**\n * Extends the new error with the properties of the original error and the `props` object.\n *\n * @param newError - The error object to extend\n * @param originalError - The original error object, if any\n * @param props - Additional properties to add, if any\n */\n\nexport function extendError(error, originalError, props) {\n  let onoError = error;\n  extendStack(onoError, originalError); // Copy properties from the original error\n\n  if (originalError && typeof originalError === \"object\") {\n    mergeErrors(onoError, originalError);\n  } // The default `toJSON` method doesn't output props like `name`, `message`, `stack`, etc.\n  // So replace it with one that outputs every property of the error.\n\n\n  onoError.toJSON = toJSON; // On Node.js, add support for the `util.inspect()` method\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n\n  if (addInspectMethod) {\n    addInspectMethod(onoError);\n  } // Finally, copy custom properties that were specified by the user.\n  // These props OVERWRITE any previous props\n\n\n  if (props && typeof props === \"object\") {\n    Object.assign(onoError, props);\n  }\n\n  return onoError;\n}\n/**\n * Extend the error stack to include its cause\n */\n\nfunction extendStack(newError, originalError) {\n  let stackProp = Object.getOwnPropertyDescriptor(newError, \"stack\");\n\n  if (isLazyStack(stackProp)) {\n    lazyJoinStacks(stackProp, newError, originalError);\n  } else if (isWritableStack(stackProp)) {\n    newError.stack = joinStacks(newError, originalError);\n  }\n}\n/**\n * Merges properties of the original error with the new error.\n *\n * @param newError - The error object to extend\n * @param originalError - The original error object, if any\n */\n\n\nfunction mergeErrors(newError, originalError) {\n  // Get the original error's keys\n  // NOTE: We specifically exclude properties that we have already set on the new error.\n  // This is _especially_ important for the `stack` property, because this property has\n  // a lazy getter in some environments\n  let keys = getDeepKeys(originalError, protectedProps); // HACK: We have to cast the errors to `any` so we can use symbol indexers.\n  // see https://github.com/Microsoft/TypeScript/issues/1863\n\n  let _newError = newError;\n  let _originalError = originalError;\n\n  for (let key of keys) {\n    if (_newError[key] === undefined) {\n      try {\n        _newError[key] = _originalError[key];\n      } catch (e) {// This property is read-only, so it can't be copied\n      }\n    }\n  }\n}","map":{"version":3,"mappings":"AAAA,SAASA,gBAAT,QAAiC,mBAAjC;AACA,SAASC,WAAT,EAAsBC,eAAtB,EAAuCC,UAAvC,EAAmDC,cAAnD,QAAyE,SAAzE;AACA,SAASC,WAAT,EAAsBC,MAAtB,QAAoC,WAApC;AAGA,MAAMC,cAAc,GAA2B,CAAC,MAAD,EAAS,SAAT,EAAoB,OAApB,CAA/C;AAEA;;;;;;;;AAOA,OAAM,SAAUC,WAAV,CAAkFC,KAAlF,EAA4FC,aAA5F,EAA+GC,KAA/G,EAAwH;EAC5H,IAAIC,QAAQ,GAAGH,KAAf;EAEAI,WAAW,CAACD,QAAD,EAAWF,aAAX,CAAX,CAH4H,CAK5H;;EACA,IAAIA,aAAa,IAAI,OAAOA,aAAP,KAAyB,QAA9C,EAAwD;IACtDI,WAAW,CAACF,QAAD,EAAWF,aAAX,CAAX;EACD,CAR2H,CAU5H;EACA;;;EACAE,QAAQ,CAACN,MAAT,GAAkBA,MAAlB,CAZ4H,CAc5H;EACA;;EACA,IAAIN,gBAAJ,EAAsB;IACpBA,gBAAgB,CAACY,QAAD,CAAhB;EACD,CAlB2H,CAoB5H;EACA;;;EACA,IAAID,KAAK,IAAI,OAAOA,KAAP,KAAiB,QAA9B,EAAwC;IACtCI,MAAM,CAACC,MAAP,CAAcJ,QAAd,EAAwBD,KAAxB;EACD;;EAED,OAAOC,QAAP;AACD;AAED;;;;AAGA,SAASC,WAAT,CAAqBI,QAArB,EAA0CP,aAA1C,EAAmE;EACjE,IAAIQ,SAAS,GAAGH,MAAM,CAACI,wBAAP,CAAgCF,QAAhC,EAA0C,OAA1C,CAAhB;;EAEA,IAAIhB,WAAW,CAACiB,SAAD,CAAf,EAA4B;IAC1Bd,cAAc,CAACc,SAAD,EAAYD,QAAZ,EAAsBP,aAAtB,CAAd;EACD,CAFD,MAGK,IAAIR,eAAe,CAACgB,SAAD,CAAnB,EAAgC;IACnCD,QAAQ,CAACG,KAAT,GAAiBjB,UAAU,CAACc,QAAD,EAAWP,aAAX,CAA3B;EACD;AACF;AAED;;;;;;;;AAMA,SAASI,WAAT,CAAqBG,QAArB,EAA0CP,aAA1C,EAAkE;EAChE;EACA;EACA;EACA;EACA,IAAIW,IAAI,GAAGhB,WAAW,CAACK,aAAD,EAAgBH,cAAhB,CAAtB,CALgE,CAOhE;EACA;;EACA,IAAIe,SAAS,GAAGL,QAAhB;EACA,IAAIM,cAAc,GAAGb,aAArB;;EAEA,KAAK,IAAIc,GAAT,IAAgBH,IAAhB,EAAsB;IACpB,IAAIC,SAAS,CAACE,GAAD,CAAT,KAAmBC,SAAvB,EAAkC;MAChC,IAAI;QACFH,SAAS,CAACE,GAAD,CAAT,GAAiBD,cAAc,CAACC,GAAD,CAA/B;MACD,CAFD,CAGA,OAAOE,CAAP,EAAU,CACR;MACD;IACF;EACF;AACF","names":["addInspectMethod","isLazyStack","isWritableStack","joinStacks","lazyJoinStacks","getDeepKeys","toJSON","protectedProps","extendError","error","originalError","props","onoError","extendStack","mergeErrors","Object","assign","newError","stackProp","getOwnPropertyDescriptor","stack","keys","_newError","_originalError","key","undefined","e"],"sources":["../src/extend-error.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}