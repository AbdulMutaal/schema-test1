{"ast":null,"code":"import { extendError } from \"./extend-error\";\nimport { normalizeArgs, normalizeOptions } from \"./normalize\";\nimport { toJSON as errorToJSON } from \"./to-json\";\nconst constructor = Ono;\nexport { constructor as Ono };\n/**\n * Creates an `Ono` instance for a specifc error type.\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\n\nfunction Ono(ErrorConstructor, options) {\n  options = normalizeOptions(options);\n\n  function ono() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    let {\n      originalError,\n      props,\n      message\n    } = normalizeArgs(args, options); // Create a new error of the specified type\n\n    let newError = new ErrorConstructor(message); // Extend the error with the properties of the original error and the `props` object\n\n    return extendError(newError, originalError, props);\n  }\n\n  ono[Symbol.species] = ErrorConstructor;\n  return ono;\n}\n/**\n * Returns an object containing all properties of the given Error object,\n * which can be used with `JSON.stringify()`.\n */\n\n\nOno.toJSON = function toJSON(error) {\n  return errorToJSON.call(error);\n};\n/**\n * Extends the given Error object with enhanced Ono functionality, such as nested stack traces,\n * additional properties, and improved support for `JSON.stringify()`.\n */\n\n\nOno.extend = function extend(error, originalError, props) {\n  if (props || originalError instanceof Error) {\n    return extendError(error, originalError, props);\n  } else if (originalError) {\n    return extendError(error, undefined, originalError);\n  } else {\n    return extendError(error);\n  }\n};","map":{"version":3,"mappings":"AAAA,SAASA,WAAT,QAA4B,gBAA5B;AACA,SAASC,aAAT,EAAwBC,gBAAxB,QAAgD,aAAhD;AACA,SAASC,MAAM,IAAIC,WAAnB,QAAsC,WAAtC;AAGA,MAAMC,WAAW,GAAGC,GAApB;AACA,SAASD,WAAW,IAAIC,GAAxB;AAEA;;;AAGA;;AACA,SAASA,GAAT,CAAkCC,gBAAlC,EAA6EC,OAA7E,EAAiG;EAC/FA,OAAO,GAAGN,gBAAgB,CAACM,OAAD,CAA1B;;EAEA,SAASC,GAAT,GAAsE;IAAA,kCAAfC,IAAe;MAAfA,IAAe;IAAA;;IACpE,IAAI;MAAEC,aAAF;MAAiBC,KAAjB;MAAwBC;IAAxB,IAAoCZ,aAAa,CAAOS,IAAP,EAAaF,OAAb,CAArD,CADoE,CAGpE;;IACA,IAAIM,QAAQ,GAAG,IAAKP,gBAAL,CAAuDM,OAAvD,CAAf,CAJoE,CAMpE;;IACA,OAAOb,WAAW,CAACc,QAAD,EAAWH,aAAX,EAA0BC,KAA1B,CAAlB;EACD;;EAEDH,GAAG,CAACM,MAAM,CAACC,OAAR,CAAH,GAAsBT,gBAAtB;EACA,OAAOE,GAAP;AACD;AAED;;;;;;AAIAH,GAAG,CAACH,MAAJ,GAAa,SAASA,MAAT,CAAgBc,KAAhB,EAAgC;EAC3C,OAAOb,WAAW,CAACc,IAAZ,CAAiBD,KAAjB,CAAP;AACD,CAFD;AAIA;;;;;;AAIAX,GAAG,CAACa,MAAJ,GAAa,SAASA,MAAT,CAAgBF,KAAhB,EAAkCN,aAAlC,EAA6DC,KAA7D,EAA2E;EACtF,IAAIA,KAAK,IAAID,aAAa,YAAYS,KAAtC,EAA6C;IAC3C,OAAOpB,WAAW,CAACiB,KAAD,EAAQN,aAAR,EAAuBC,KAAvB,CAAlB;EACD,CAFD,MAGK,IAAID,aAAJ,EAAmB;IACtB,OAAOX,WAAW,CAACiB,KAAD,EAAQI,SAAR,EAAmBV,aAAnB,CAAlB;EACD,CAFI,MAGA;IACH,OAAOX,WAAW,CAACiB,KAAD,CAAlB;EACD;AACF,CAVD","names":["extendError","normalizeArgs","normalizeOptions","toJSON","errorToJSON","constructor","Ono","ErrorConstructor","options","ono","args","originalError","props","message","newError","Symbol","species","error","call","extend","Error","undefined"],"sources":["../src/constructor.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}