{"ast":null,"code":"\"use strict\";\n\nmodule.exports = Pointer;\n\nconst $Ref = require(\"./ref\");\n\nconst url = require(\"./util/url\");\n\nconst {\n  JSONParserError,\n  InvalidPointerError,\n  MissingPointerError,\n  isHandledError\n} = require(\"./util/errors\");\n\nconst slashes = /\\//g;\nconst tildes = /~/g;\nconst escapedSlash = /~1/g;\nconst escapedTilde = /~0/g;\n/**\n * This class represents a single JSON pointer and its resolved value.\n *\n * @param {$Ref} $ref\n * @param {string} path\n * @param {string} [friendlyPath] - The original user-specified path (used for error messages)\n * @constructor\n */\n\nfunction Pointer($ref, path, friendlyPath) {\n  /**\n   * The {@link $Ref} object that contains this {@link Pointer} object.\n   * @type {$Ref}\n   */\n  this.$ref = $ref;\n  /**\n   * The file path or URL, containing the JSON pointer in the hash.\n   * This path is relative to the path of the main JSON schema file.\n   * @type {string}\n   */\n\n  this.path = path;\n  /**\n   * The original path or URL, used for error messages.\n   * @type {string}\n   */\n\n  this.originalPath = friendlyPath || path;\n  /**\n   * The value of the JSON pointer.\n   * Can be any JSON type, not just objects. Unknown file types are represented as Buffers (byte arrays).\n   * @type {?*}\n   */\n\n  this.value = undefined;\n  /**\n   * Indicates whether the pointer references itself.\n   * @type {boolean}\n   */\n\n  this.circular = false;\n  /**\n   * The number of indirect references that were traversed to resolve the value.\n   * Resolving a single pointer may require resolving multiple $Refs.\n   * @type {number}\n   */\n\n  this.indirections = 0;\n}\n/**\n * Resolves the value of a nested property within the given object.\n *\n * @param {*} obj - The object that will be crawled\n * @param {$RefParserOptions} options\n * @param {string} pathFromRoot - the path of place that initiated resolving\n *\n * @returns {Pointer}\n * Returns a JSON pointer whose {@link Pointer#value} is the resolved value.\n * If resolving this value required resolving other JSON references, then\n * the {@link Pointer#$ref} and {@link Pointer#path} will reflect the resolution path\n * of the resolved value.\n */\n\n\nPointer.prototype.resolve = function (obj, options, pathFromRoot) {\n  let tokens = Pointer.parse(this.path, this.originalPath); // Crawl the object, one token at a time\n\n  this.value = unwrapOrThrow(obj);\n\n  for (let i = 0; i < tokens.length; i++) {\n    if (resolveIf$Ref(this, options)) {\n      // The $ref path has changed, so append the remaining tokens to the path\n      this.path = Pointer.join(this.path, tokens.slice(i));\n    }\n\n    if (typeof this.value === \"object\" && this.value !== null && \"$ref\" in this.value) {\n      return this;\n    }\n\n    let token = tokens[i];\n\n    if (this.value[token] === undefined || this.value[token] === null) {\n      this.value = null;\n      throw new MissingPointerError(token, this.originalPath);\n    } else {\n      this.value = this.value[token];\n    }\n  } // Resolve the final value\n\n\n  if (!this.value || this.value.$ref && url.resolve(this.path, this.value.$ref) !== pathFromRoot) {\n    resolveIf$Ref(this, options);\n  }\n\n  return this;\n};\n/**\n * Sets the value of a nested property within the given object.\n *\n * @param {*} obj - The object that will be crawled\n * @param {*} value - the value to assign\n * @param {$RefParserOptions} options\n *\n * @returns {*}\n * Returns the modified object, or an entirely new object if the entire object is overwritten.\n */\n\n\nPointer.prototype.set = function (obj, value, options) {\n  let tokens = Pointer.parse(this.path);\n  let token;\n\n  if (tokens.length === 0) {\n    // There are no tokens, replace the entire object with the new value\n    this.value = value;\n    return value;\n  } // Crawl the object, one token at a time\n\n\n  this.value = unwrapOrThrow(obj);\n\n  for (let i = 0; i < tokens.length - 1; i++) {\n    resolveIf$Ref(this, options);\n    token = tokens[i];\n\n    if (this.value && this.value[token] !== undefined) {\n      // The token exists\n      this.value = this.value[token];\n    } else {\n      // The token doesn't exist, so create it\n      this.value = setValue(this, token, {});\n    }\n  } // Set the value of the final token\n\n\n  resolveIf$Ref(this, options);\n  token = tokens[tokens.length - 1];\n  setValue(this, token, value); // Return the updated object\n\n  return obj;\n};\n/**\n * Parses a JSON pointer (or a path containing a JSON pointer in the hash)\n * and returns an array of the pointer's tokens.\n * (e.g. \"schema.json#/definitions/person/name\" => [\"definitions\", \"person\", \"name\"])\n *\n * The pointer is parsed according to RFC 6901\n * {@link https://tools.ietf.org/html/rfc6901#section-3}\n *\n * @param {string} path\n * @param {string} [originalPath]\n * @returns {string[]}\n */\n\n\nPointer.parse = function (path, originalPath) {\n  // Get the JSON pointer from the path's hash\n  let pointer = url.getHash(path).substr(1); // If there's no pointer, then there are no tokens,\n  // so return an empty array\n\n  if (!pointer) {\n    return [];\n  } // Split into an array\n\n\n  pointer = pointer.split(\"/\"); // Decode each part, according to RFC 6901\n\n  for (let i = 0; i < pointer.length; i++) {\n    pointer[i] = decodeURIComponent(pointer[i].replace(escapedSlash, \"/\").replace(escapedTilde, \"~\"));\n  }\n\n  if (pointer[0] !== \"\") {\n    throw new InvalidPointerError(pointer, originalPath === undefined ? path : originalPath);\n  }\n\n  return pointer.slice(1);\n};\n/**\n * Creates a JSON pointer path, by joining one or more tokens to a base path.\n *\n * @param {string} base - The base path (e.g. \"schema.json#/definitions/person\")\n * @param {string|string[]} tokens - The token(s) to append (e.g. [\"name\", \"first\"])\n * @returns {string}\n */\n\n\nPointer.join = function (base, tokens) {\n  // Ensure that the base path contains a hash\n  if (base.indexOf(\"#\") === -1) {\n    base += \"#\";\n  } // Append each token to the base path\n\n\n  tokens = Array.isArray(tokens) ? tokens : [tokens];\n\n  for (let i = 0; i < tokens.length; i++) {\n    let token = tokens[i]; // Encode the token, according to RFC 6901\n\n    base += \"/\" + encodeURIComponent(token.replace(tildes, \"~0\").replace(slashes, \"~1\"));\n  }\n\n  return base;\n};\n/**\n * If the given pointer's {@link Pointer#value} is a JSON reference,\n * then the reference is resolved and {@link Pointer#value} is replaced with the resolved value.\n * In addition, {@link Pointer#path} and {@link Pointer#$ref} are updated to reflect the\n * resolution path of the new value.\n *\n * @param {Pointer} pointer\n * @param {$RefParserOptions} options\n * @returns {boolean} - Returns `true` if the resolution path changed\n */\n\n\nfunction resolveIf$Ref(pointer, options) {\n  // Is the value a JSON reference? (and allowed?)\n  if ($Ref.isAllowed$Ref(pointer.value, options)) {\n    let $refPath = url.resolve(pointer.path, pointer.value.$ref);\n\n    if ($refPath === pointer.path) {\n      // The value is a reference to itself, so there's nothing to do.\n      pointer.circular = true;\n    } else {\n      let resolved = pointer.$ref.$refs._resolve($refPath, pointer.path, options);\n\n      if (resolved === null) {\n        return false;\n      }\n\n      pointer.indirections += resolved.indirections + 1;\n\n      if ($Ref.isExtended$Ref(pointer.value)) {\n        // This JSON reference \"extends\" the resolved value, rather than simply pointing to it.\n        // So the resolved path does NOT change.  Just the value does.\n        pointer.value = $Ref.dereference(pointer.value, resolved.value);\n        return false;\n      } else {\n        // Resolve the reference\n        pointer.$ref = resolved.$ref;\n        pointer.path = resolved.path;\n        pointer.value = resolved.value;\n      }\n\n      return true;\n    }\n  }\n}\n/**\n * Sets the specified token value of the {@link Pointer#value}.\n *\n * The token is evaluated according to RFC 6901.\n * {@link https://tools.ietf.org/html/rfc6901#section-4}\n *\n * @param {Pointer} pointer - The JSON Pointer whose value will be modified\n * @param {string} token - A JSON Pointer token that indicates how to modify `obj`\n * @param {*} value - The value to assign\n * @returns {*} - Returns the assigned value\n */\n\n\nfunction setValue(pointer, token, value) {\n  if (pointer.value && typeof pointer.value === \"object\") {\n    if (token === \"-\" && Array.isArray(pointer.value)) {\n      pointer.value.push(value);\n    } else {\n      pointer.value[token] = value;\n    }\n  } else {\n    throw new JSONParserError(`Error assigning $ref pointer \"${pointer.path}\". \\nCannot set \"${token}\" of a non-object.`);\n  }\n\n  return value;\n}\n\nfunction unwrapOrThrow(value) {\n  if (isHandledError(value)) {\n    throw value;\n  }\n\n  return value;\n}","map":{"version":3,"names":["module","exports","Pointer","$Ref","require","url","JSONParserError","InvalidPointerError","MissingPointerError","isHandledError","slashes","tildes","escapedSlash","escapedTilde","$ref","path","friendlyPath","originalPath","value","undefined","circular","indirections","prototype","resolve","obj","options","pathFromRoot","tokens","parse","unwrapOrThrow","i","length","resolveIf$Ref","join","slice","token","set","setValue","pointer","getHash","substr","split","decodeURIComponent","replace","base","indexOf","Array","isArray","encodeURIComponent","isAllowed$Ref","$refPath","resolved","$refs","_resolve","isExtended$Ref","dereference","push"],"sources":["/Users/abdulmutaalazhar/Desktop/Folders/ensembleUi/schema-test1/node_modules/@apidevtools/json-schema-ref-parser/lib/pointer.js"],"sourcesContent":["\"use strict\";\n\nmodule.exports = Pointer;\n\nconst $Ref = require(\"./ref\");\nconst url = require(\"./util/url\");\nconst { JSONParserError, InvalidPointerError, MissingPointerError, isHandledError } = require(\"./util/errors\");\nconst slashes = /\\//g;\nconst tildes = /~/g;\nconst escapedSlash = /~1/g;\nconst escapedTilde = /~0/g;\n\n/**\n * This class represents a single JSON pointer and its resolved value.\n *\n * @param {$Ref} $ref\n * @param {string} path\n * @param {string} [friendlyPath] - The original user-specified path (used for error messages)\n * @constructor\n */\nfunction Pointer ($ref, path, friendlyPath) {\n  /**\n   * The {@link $Ref} object that contains this {@link Pointer} object.\n   * @type {$Ref}\n   */\n  this.$ref = $ref;\n\n  /**\n   * The file path or URL, containing the JSON pointer in the hash.\n   * This path is relative to the path of the main JSON schema file.\n   * @type {string}\n   */\n  this.path = path;\n\n  /**\n   * The original path or URL, used for error messages.\n   * @type {string}\n   */\n  this.originalPath = friendlyPath || path;\n\n  /**\n   * The value of the JSON pointer.\n   * Can be any JSON type, not just objects. Unknown file types are represented as Buffers (byte arrays).\n   * @type {?*}\n   */\n  this.value = undefined;\n\n  /**\n   * Indicates whether the pointer references itself.\n   * @type {boolean}\n   */\n  this.circular = false;\n\n  /**\n   * The number of indirect references that were traversed to resolve the value.\n   * Resolving a single pointer may require resolving multiple $Refs.\n   * @type {number}\n   */\n  this.indirections = 0;\n}\n\n/**\n * Resolves the value of a nested property within the given object.\n *\n * @param {*} obj - The object that will be crawled\n * @param {$RefParserOptions} options\n * @param {string} pathFromRoot - the path of place that initiated resolving\n *\n * @returns {Pointer}\n * Returns a JSON pointer whose {@link Pointer#value} is the resolved value.\n * If resolving this value required resolving other JSON references, then\n * the {@link Pointer#$ref} and {@link Pointer#path} will reflect the resolution path\n * of the resolved value.\n */\nPointer.prototype.resolve = function (obj, options, pathFromRoot) {\n  let tokens = Pointer.parse(this.path, this.originalPath);\n\n  // Crawl the object, one token at a time\n  this.value = unwrapOrThrow(obj);\n\n  for (let i = 0; i < tokens.length; i++) {\n    if (resolveIf$Ref(this, options)) {\n      // The $ref path has changed, so append the remaining tokens to the path\n      this.path = Pointer.join(this.path, tokens.slice(i));\n    }\n\n    if (typeof this.value === \"object\" && this.value !== null && \"$ref\" in this.value) {\n      return this;\n    }\n\n    let token = tokens[i];\n    if (this.value[token] === undefined || this.value[token] === null) {\n      this.value = null;\n      throw new MissingPointerError(token, this.originalPath);\n    }\n    else {\n      this.value = this.value[token];\n    }\n  }\n\n  // Resolve the final value\n  if (!this.value || this.value.$ref && url.resolve(this.path, this.value.$ref) !== pathFromRoot) {\n    resolveIf$Ref(this, options);\n  }\n\n  return this;\n};\n\n/**\n * Sets the value of a nested property within the given object.\n *\n * @param {*} obj - The object that will be crawled\n * @param {*} value - the value to assign\n * @param {$RefParserOptions} options\n *\n * @returns {*}\n * Returns the modified object, or an entirely new object if the entire object is overwritten.\n */\nPointer.prototype.set = function (obj, value, options) {\n  let tokens = Pointer.parse(this.path);\n  let token;\n\n  if (tokens.length === 0) {\n    // There are no tokens, replace the entire object with the new value\n    this.value = value;\n    return value;\n  }\n\n  // Crawl the object, one token at a time\n  this.value = unwrapOrThrow(obj);\n\n  for (let i = 0; i < tokens.length - 1; i++) {\n    resolveIf$Ref(this, options);\n\n    token = tokens[i];\n    if (this.value && this.value[token] !== undefined) {\n      // The token exists\n      this.value = this.value[token];\n    }\n    else {\n      // The token doesn't exist, so create it\n      this.value = setValue(this, token, {});\n    }\n  }\n\n  // Set the value of the final token\n  resolveIf$Ref(this, options);\n  token = tokens[tokens.length - 1];\n  setValue(this, token, value);\n\n  // Return the updated object\n  return obj;\n};\n\n/**\n * Parses a JSON pointer (or a path containing a JSON pointer in the hash)\n * and returns an array of the pointer's tokens.\n * (e.g. \"schema.json#/definitions/person/name\" => [\"definitions\", \"person\", \"name\"])\n *\n * The pointer is parsed according to RFC 6901\n * {@link https://tools.ietf.org/html/rfc6901#section-3}\n *\n * @param {string} path\n * @param {string} [originalPath]\n * @returns {string[]}\n */\nPointer.parse = function (path, originalPath) {\n  // Get the JSON pointer from the path's hash\n  let pointer = url.getHash(path).substr(1);\n\n  // If there's no pointer, then there are no tokens,\n  // so return an empty array\n  if (!pointer) {\n    return [];\n  }\n\n  // Split into an array\n  pointer = pointer.split(\"/\");\n\n  // Decode each part, according to RFC 6901\n  for (let i = 0; i < pointer.length; i++) {\n    pointer[i] = decodeURIComponent(pointer[i].replace(escapedSlash, \"/\").replace(escapedTilde, \"~\"));\n  }\n\n  if (pointer[0] !== \"\") {\n    throw new InvalidPointerError(pointer, originalPath === undefined ? path : originalPath);\n  }\n\n  return pointer.slice(1);\n};\n\n/**\n * Creates a JSON pointer path, by joining one or more tokens to a base path.\n *\n * @param {string} base - The base path (e.g. \"schema.json#/definitions/person\")\n * @param {string|string[]} tokens - The token(s) to append (e.g. [\"name\", \"first\"])\n * @returns {string}\n */\nPointer.join = function (base, tokens) {\n  // Ensure that the base path contains a hash\n  if (base.indexOf(\"#\") === -1) {\n    base += \"#\";\n  }\n\n  // Append each token to the base path\n  tokens = Array.isArray(tokens) ? tokens : [tokens];\n  for (let i = 0; i < tokens.length; i++) {\n    let token = tokens[i];\n    // Encode the token, according to RFC 6901\n    base += \"/\" + encodeURIComponent(token.replace(tildes, \"~0\").replace(slashes, \"~1\"));\n  }\n\n  return base;\n};\n\n/**\n * If the given pointer's {@link Pointer#value} is a JSON reference,\n * then the reference is resolved and {@link Pointer#value} is replaced with the resolved value.\n * In addition, {@link Pointer#path} and {@link Pointer#$ref} are updated to reflect the\n * resolution path of the new value.\n *\n * @param {Pointer} pointer\n * @param {$RefParserOptions} options\n * @returns {boolean} - Returns `true` if the resolution path changed\n */\nfunction resolveIf$Ref (pointer, options) {\n  // Is the value a JSON reference? (and allowed?)\n\n  if ($Ref.isAllowed$Ref(pointer.value, options)) {\n    let $refPath = url.resolve(pointer.path, pointer.value.$ref);\n\n    if ($refPath === pointer.path) {\n      // The value is a reference to itself, so there's nothing to do.\n      pointer.circular = true;\n    }\n    else {\n      let resolved = pointer.$ref.$refs._resolve($refPath, pointer.path, options);\n      if (resolved === null) {\n        return false;\n      }\n\n      pointer.indirections += resolved.indirections + 1;\n\n      if ($Ref.isExtended$Ref(pointer.value)) {\n        // This JSON reference \"extends\" the resolved value, rather than simply pointing to it.\n        // So the resolved path does NOT change.  Just the value does.\n        pointer.value = $Ref.dereference(pointer.value, resolved.value);\n        return false;\n      }\n      else {\n        // Resolve the reference\n        pointer.$ref = resolved.$ref;\n        pointer.path = resolved.path;\n        pointer.value = resolved.value;\n      }\n\n      return true;\n    }\n  }\n}\n\n/**\n * Sets the specified token value of the {@link Pointer#value}.\n *\n * The token is evaluated according to RFC 6901.\n * {@link https://tools.ietf.org/html/rfc6901#section-4}\n *\n * @param {Pointer} pointer - The JSON Pointer whose value will be modified\n * @param {string} token - A JSON Pointer token that indicates how to modify `obj`\n * @param {*} value - The value to assign\n * @returns {*} - Returns the assigned value\n */\nfunction setValue (pointer, token, value) {\n  if (pointer.value && typeof pointer.value === \"object\") {\n    if (token === \"-\" && Array.isArray(pointer.value)) {\n      pointer.value.push(value);\n    }\n    else {\n      pointer.value[token] = value;\n    }\n  }\n  else {\n    throw new JSONParserError(`Error assigning $ref pointer \"${pointer.path}\". \\nCannot set \"${token}\" of a non-object.`);\n  }\n  return value;\n}\n\n\nfunction unwrapOrThrow (value) {\n  if (isHandledError(value)) {\n    throw value;\n  }\n\n  return value;\n}\n"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,OAAjB;;AAEA,MAAMC,IAAI,GAAGC,OAAO,CAAC,OAAD,CAApB;;AACA,MAAMC,GAAG,GAAGD,OAAO,CAAC,YAAD,CAAnB;;AACA,MAAM;EAAEE,eAAF;EAAmBC,mBAAnB;EAAwCC,mBAAxC;EAA6DC;AAA7D,IAAgFL,OAAO,CAAC,eAAD,CAA7F;;AACA,MAAMM,OAAO,GAAG,KAAhB;AACA,MAAMC,MAAM,GAAG,IAAf;AACA,MAAMC,YAAY,GAAG,KAArB;AACA,MAAMC,YAAY,GAAG,KAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASX,OAAT,CAAkBY,IAAlB,EAAwBC,IAAxB,EAA8BC,YAA9B,EAA4C;EAC1C;AACF;AACA;AACA;EACE,KAAKF,IAAL,GAAYA,IAAZ;EAEA;AACF;AACA;AACA;AACA;;EACE,KAAKC,IAAL,GAAYA,IAAZ;EAEA;AACF;AACA;AACA;;EACE,KAAKE,YAAL,GAAoBD,YAAY,IAAID,IAApC;EAEA;AACF;AACA;AACA;AACA;;EACE,KAAKG,KAAL,GAAaC,SAAb;EAEA;AACF;AACA;AACA;;EACE,KAAKC,QAAL,GAAgB,KAAhB;EAEA;AACF;AACA;AACA;AACA;;EACE,KAAKC,YAAL,GAAoB,CAApB;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAnB,OAAO,CAACoB,SAAR,CAAkBC,OAAlB,GAA4B,UAAUC,GAAV,EAAeC,OAAf,EAAwBC,YAAxB,EAAsC;EAChE,IAAIC,MAAM,GAAGzB,OAAO,CAAC0B,KAAR,CAAc,KAAKb,IAAnB,EAAyB,KAAKE,YAA9B,CAAb,CADgE,CAGhE;;EACA,KAAKC,KAAL,GAAaW,aAAa,CAACL,GAAD,CAA1B;;EAEA,KAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,MAAM,CAACI,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;IACtC,IAAIE,aAAa,CAAC,IAAD,EAAOP,OAAP,CAAjB,EAAkC;MAChC;MACA,KAAKV,IAAL,GAAYb,OAAO,CAAC+B,IAAR,CAAa,KAAKlB,IAAlB,EAAwBY,MAAM,CAACO,KAAP,CAAaJ,CAAb,CAAxB,CAAZ;IACD;;IAED,IAAI,OAAO,KAAKZ,KAAZ,KAAsB,QAAtB,IAAkC,KAAKA,KAAL,KAAe,IAAjD,IAAyD,UAAU,KAAKA,KAA5E,EAAmF;MACjF,OAAO,IAAP;IACD;;IAED,IAAIiB,KAAK,GAAGR,MAAM,CAACG,CAAD,CAAlB;;IACA,IAAI,KAAKZ,KAAL,CAAWiB,KAAX,MAAsBhB,SAAtB,IAAmC,KAAKD,KAAL,CAAWiB,KAAX,MAAsB,IAA7D,EAAmE;MACjE,KAAKjB,KAAL,GAAa,IAAb;MACA,MAAM,IAAIV,mBAAJ,CAAwB2B,KAAxB,EAA+B,KAAKlB,YAApC,CAAN;IACD,CAHD,MAIK;MACH,KAAKC,KAAL,GAAa,KAAKA,KAAL,CAAWiB,KAAX,CAAb;IACD;EACF,CAxB+D,CA0BhE;;;EACA,IAAI,CAAC,KAAKjB,KAAN,IAAe,KAAKA,KAAL,CAAWJ,IAAX,IAAmBT,GAAG,CAACkB,OAAJ,CAAY,KAAKR,IAAjB,EAAuB,KAAKG,KAAL,CAAWJ,IAAlC,MAA4CY,YAAlF,EAAgG;IAC9FM,aAAa,CAAC,IAAD,EAAOP,OAAP,CAAb;EACD;;EAED,OAAO,IAAP;AACD,CAhCD;AAkCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAvB,OAAO,CAACoB,SAAR,CAAkBc,GAAlB,GAAwB,UAAUZ,GAAV,EAAeN,KAAf,EAAsBO,OAAtB,EAA+B;EACrD,IAAIE,MAAM,GAAGzB,OAAO,CAAC0B,KAAR,CAAc,KAAKb,IAAnB,CAAb;EACA,IAAIoB,KAAJ;;EAEA,IAAIR,MAAM,CAACI,MAAP,KAAkB,CAAtB,EAAyB;IACvB;IACA,KAAKb,KAAL,GAAaA,KAAb;IACA,OAAOA,KAAP;EACD,CARoD,CAUrD;;;EACA,KAAKA,KAAL,GAAaW,aAAa,CAACL,GAAD,CAA1B;;EAEA,KAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,MAAM,CAACI,MAAP,GAAgB,CAApC,EAAuCD,CAAC,EAAxC,EAA4C;IAC1CE,aAAa,CAAC,IAAD,EAAOP,OAAP,CAAb;IAEAU,KAAK,GAAGR,MAAM,CAACG,CAAD,CAAd;;IACA,IAAI,KAAKZ,KAAL,IAAc,KAAKA,KAAL,CAAWiB,KAAX,MAAsBhB,SAAxC,EAAmD;MACjD;MACA,KAAKD,KAAL,GAAa,KAAKA,KAAL,CAAWiB,KAAX,CAAb;IACD,CAHD,MAIK;MACH;MACA,KAAKjB,KAAL,GAAamB,QAAQ,CAAC,IAAD,EAAOF,KAAP,EAAc,EAAd,CAArB;IACD;EACF,CAzBoD,CA2BrD;;;EACAH,aAAa,CAAC,IAAD,EAAOP,OAAP,CAAb;EACAU,KAAK,GAAGR,MAAM,CAACA,MAAM,CAACI,MAAP,GAAgB,CAAjB,CAAd;EACAM,QAAQ,CAAC,IAAD,EAAOF,KAAP,EAAcjB,KAAd,CAAR,CA9BqD,CAgCrD;;EACA,OAAOM,GAAP;AACD,CAlCD;AAoCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAtB,OAAO,CAAC0B,KAAR,GAAgB,UAAUb,IAAV,EAAgBE,YAAhB,EAA8B;EAC5C;EACA,IAAIqB,OAAO,GAAGjC,GAAG,CAACkC,OAAJ,CAAYxB,IAAZ,EAAkByB,MAAlB,CAAyB,CAAzB,CAAd,CAF4C,CAI5C;EACA;;EACA,IAAI,CAACF,OAAL,EAAc;IACZ,OAAO,EAAP;EACD,CAR2C,CAU5C;;;EACAA,OAAO,GAAGA,OAAO,CAACG,KAAR,CAAc,GAAd,CAAV,CAX4C,CAa5C;;EACA,KAAK,IAAIX,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGQ,OAAO,CAACP,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;IACvCQ,OAAO,CAACR,CAAD,CAAP,GAAaY,kBAAkB,CAACJ,OAAO,CAACR,CAAD,CAAP,CAAWa,OAAX,CAAmB/B,YAAnB,EAAiC,GAAjC,EAAsC+B,OAAtC,CAA8C9B,YAA9C,EAA4D,GAA5D,CAAD,CAA/B;EACD;;EAED,IAAIyB,OAAO,CAAC,CAAD,CAAP,KAAe,EAAnB,EAAuB;IACrB,MAAM,IAAI/B,mBAAJ,CAAwB+B,OAAxB,EAAiCrB,YAAY,KAAKE,SAAjB,GAA6BJ,IAA7B,GAAoCE,YAArE,CAAN;EACD;;EAED,OAAOqB,OAAO,CAACJ,KAAR,CAAc,CAAd,CAAP;AACD,CAvBD;AAyBA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAhC,OAAO,CAAC+B,IAAR,GAAe,UAAUW,IAAV,EAAgBjB,MAAhB,EAAwB;EACrC;EACA,IAAIiB,IAAI,CAACC,OAAL,CAAa,GAAb,MAAsB,CAAC,CAA3B,EAA8B;IAC5BD,IAAI,IAAI,GAAR;EACD,CAJoC,CAMrC;;;EACAjB,MAAM,GAAGmB,KAAK,CAACC,OAAN,CAAcpB,MAAd,IAAwBA,MAAxB,GAAiC,CAACA,MAAD,CAA1C;;EACA,KAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,MAAM,CAACI,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;IACtC,IAAIK,KAAK,GAAGR,MAAM,CAACG,CAAD,CAAlB,CADsC,CAEtC;;IACAc,IAAI,IAAI,MAAMI,kBAAkB,CAACb,KAAK,CAACQ,OAAN,CAAchC,MAAd,EAAsB,IAAtB,EAA4BgC,OAA5B,CAAoCjC,OAApC,EAA6C,IAA7C,CAAD,CAAhC;EACD;;EAED,OAAOkC,IAAP;AACD,CAfD;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASZ,aAAT,CAAwBM,OAAxB,EAAiCb,OAAjC,EAA0C;EACxC;EAEA,IAAItB,IAAI,CAAC8C,aAAL,CAAmBX,OAAO,CAACpB,KAA3B,EAAkCO,OAAlC,CAAJ,EAAgD;IAC9C,IAAIyB,QAAQ,GAAG7C,GAAG,CAACkB,OAAJ,CAAYe,OAAO,CAACvB,IAApB,EAA0BuB,OAAO,CAACpB,KAAR,CAAcJ,IAAxC,CAAf;;IAEA,IAAIoC,QAAQ,KAAKZ,OAAO,CAACvB,IAAzB,EAA+B;MAC7B;MACAuB,OAAO,CAAClB,QAAR,GAAmB,IAAnB;IACD,CAHD,MAIK;MACH,IAAI+B,QAAQ,GAAGb,OAAO,CAACxB,IAAR,CAAasC,KAAb,CAAmBC,QAAnB,CAA4BH,QAA5B,EAAsCZ,OAAO,CAACvB,IAA9C,EAAoDU,OAApD,CAAf;;MACA,IAAI0B,QAAQ,KAAK,IAAjB,EAAuB;QACrB,OAAO,KAAP;MACD;;MAEDb,OAAO,CAACjB,YAAR,IAAwB8B,QAAQ,CAAC9B,YAAT,GAAwB,CAAhD;;MAEA,IAAIlB,IAAI,CAACmD,cAAL,CAAoBhB,OAAO,CAACpB,KAA5B,CAAJ,EAAwC;QACtC;QACA;QACAoB,OAAO,CAACpB,KAAR,GAAgBf,IAAI,CAACoD,WAAL,CAAiBjB,OAAO,CAACpB,KAAzB,EAAgCiC,QAAQ,CAACjC,KAAzC,CAAhB;QACA,OAAO,KAAP;MACD,CALD,MAMK;QACH;QACAoB,OAAO,CAACxB,IAAR,GAAeqC,QAAQ,CAACrC,IAAxB;QACAwB,OAAO,CAACvB,IAAR,GAAeoC,QAAQ,CAACpC,IAAxB;QACAuB,OAAO,CAACpB,KAAR,GAAgBiC,QAAQ,CAACjC,KAAzB;MACD;;MAED,OAAO,IAAP;IACD;EACF;AACF;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASmB,QAAT,CAAmBC,OAAnB,EAA4BH,KAA5B,EAAmCjB,KAAnC,EAA0C;EACxC,IAAIoB,OAAO,CAACpB,KAAR,IAAiB,OAAOoB,OAAO,CAACpB,KAAf,KAAyB,QAA9C,EAAwD;IACtD,IAAIiB,KAAK,KAAK,GAAV,IAAiBW,KAAK,CAACC,OAAN,CAAcT,OAAO,CAACpB,KAAtB,CAArB,EAAmD;MACjDoB,OAAO,CAACpB,KAAR,CAAcsC,IAAd,CAAmBtC,KAAnB;IACD,CAFD,MAGK;MACHoB,OAAO,CAACpB,KAAR,CAAciB,KAAd,IAAuBjB,KAAvB;IACD;EACF,CAPD,MAQK;IACH,MAAM,IAAIZ,eAAJ,CAAqB,iCAAgCgC,OAAO,CAACvB,IAAK,oBAAmBoB,KAAM,oBAA3F,CAAN;EACD;;EACD,OAAOjB,KAAP;AACD;;AAGD,SAASW,aAAT,CAAwBX,KAAxB,EAA+B;EAC7B,IAAIT,cAAc,CAACS,KAAD,CAAlB,EAA2B;IACzB,MAAMA,KAAN;EACD;;EAED,OAAOA,KAAP;AACD"},"metadata":{},"sourceType":"script"}