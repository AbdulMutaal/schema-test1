{"ast":null,"code":"\"use strict\";\n\nconst $Ref = require(\"./ref\");\n\nconst Pointer = require(\"./pointer\");\n\nconst {\n  ono\n} = require(\"@jsdevtools/ono\");\n\nconst url = require(\"./util/url\");\n\nmodule.exports = dereference;\n/**\n * Crawls the JSON schema, finds all JSON references, and dereferences them.\n * This method mutates the JSON schema object, replacing JSON references with their resolved value.\n *\n * @param {$RefParser} parser\n * @param {$RefParserOptions} options\n */\n\nfunction dereference(parser, options) {\n  // console.log('Dereferencing $ref pointers in %s', parser.$refs._root$Ref.path);\n  let dereferenced = crawl(parser.schema, parser.$refs._root$Ref.path, \"#\", new Set(), new Set(), new Map(), parser.$refs, options);\n  parser.$refs.circular = dereferenced.circular;\n  parser.schema = dereferenced.value;\n}\n/**\n * Recursively crawls the given value, and dereferences any JSON references.\n *\n * @param {*} obj - The value to crawl. If it's not an object or array, it will be ignored.\n * @param {string} path - The full path of `obj`, possibly with a JSON Pointer in the hash\n * @param {string} pathFromRoot - The path of `obj` from the schema root\n * @param {Set<object>} parents - An array of the parent objects that have already been dereferenced\n * @param {Set<object>} processedObjects - An array of all the objects that have already been processed\n * @param {Map<string,object>} dereferencedCache - An map of all the dereferenced objects\n * @param {$Refs} $refs\n * @param {$RefParserOptions} options\n * @returns {{value: object, circular: boolean}}\n */\n\n\nfunction crawl(obj, path, pathFromRoot, parents, processedObjects, dereferencedCache, $refs, options) {\n  let dereferenced;\n  let result = {\n    value: obj,\n    circular: false\n  };\n\n  if (options.dereference.circular === \"ignore\" || !processedObjects.has(obj)) {\n    if (obj && typeof obj === \"object\" && !ArrayBuffer.isView(obj)) {\n      parents.add(obj);\n      processedObjects.add(obj);\n\n      if ($Ref.isAllowed$Ref(obj, options)) {\n        dereferenced = dereference$Ref(obj, path, pathFromRoot, parents, processedObjects, dereferencedCache, $refs, options);\n        result.circular = dereferenced.circular;\n        result.value = dereferenced.value;\n      } else {\n        for (const key of Object.keys(obj)) {\n          let keyPath = Pointer.join(path, key);\n          let keyPathFromRoot = Pointer.join(pathFromRoot, key);\n          let value = obj[key];\n          let circular = false;\n\n          if ($Ref.isAllowed$Ref(value, options)) {\n            dereferenced = dereference$Ref(value, keyPath, keyPathFromRoot, parents, processedObjects, dereferencedCache, $refs, options);\n            circular = dereferenced.circular; // Avoid pointless mutations; breaks frozen objects to no profit\n\n            if (obj[key] !== dereferenced.value) {\n              obj[key] = dereferenced.value;\n            }\n          } else {\n            if (!parents.has(value)) {\n              dereferenced = crawl(value, keyPath, keyPathFromRoot, parents, processedObjects, dereferencedCache, $refs, options);\n              circular = dereferenced.circular; // Avoid pointless mutations; breaks frozen objects to no profit\n\n              if (obj[key] !== dereferenced.value) {\n                obj[key] = dereferenced.value;\n              }\n            } else {\n              circular = foundCircularReference(keyPath, $refs, options);\n            }\n          } // Set the \"isCircular\" flag if this or any other property is circular\n\n\n          result.circular = result.circular || circular;\n        }\n      }\n\n      parents.delete(obj);\n    }\n  }\n\n  return result;\n}\n/**\n * Dereferences the given JSON Reference, and then crawls the resulting value.\n *\n * @param {{$ref: string}} $ref - The JSON Reference to resolve\n * @param {string} path - The full path of `$ref`, possibly with a JSON Pointer in the hash\n * @param {string} pathFromRoot - The path of `$ref` from the schema root\n * @param {Set<object>} parents - An array of the parent objects that have already been dereferenced\n * @param {Set<object>} processedObjects - An array of all the objects that have already been dereferenced\n * @param {Map<string,object>} dereferencedCache - An map of all the dereferenced objects\n * @param {$Refs} $refs\n * @param {$RefParserOptions} options\n * @returns {{value: object, circular: boolean}}\n */\n\n\nfunction dereference$Ref($ref, path, pathFromRoot, parents, processedObjects, dereferencedCache, $refs, options) {\n  // console.log('Dereferencing $ref pointer \"%s\" at %s', $ref.$ref, path);\n  let $refPath = url.resolve(path, $ref.$ref);\n  const cache = dereferencedCache.get($refPath);\n\n  if (cache) {\n    const refKeys = Object.keys($ref);\n\n    if (refKeys.length > 1) {\n      const extraKeys = {};\n\n      for (let key of refKeys) {\n        if (key !== \"$ref\" && !(key in cache.value)) {\n          extraKeys[key] = $ref[key];\n        }\n      }\n\n      return {\n        circular: cache.circular,\n        value: Object.assign({}, cache.value, extraKeys)\n      };\n    }\n\n    return cache;\n  }\n\n  let pointer = $refs._resolve($refPath, path, options);\n\n  if (pointer === null) {\n    return {\n      circular: false,\n      value: null\n    };\n  } // Check for circular references\n\n\n  let directCircular = pointer.circular;\n  let circular = directCircular || parents.has(pointer.value);\n  circular && foundCircularReference(path, $refs, options); // Dereference the JSON reference\n\n  let dereferencedValue = $Ref.dereference($ref, pointer.value); // Crawl the dereferenced value (unless it's circular)\n\n  if (!circular) {\n    // Determine if the dereferenced value is circular\n    let dereferenced = crawl(dereferencedValue, pointer.path, pathFromRoot, parents, processedObjects, dereferencedCache, $refs, options);\n    circular = dereferenced.circular;\n    dereferencedValue = dereferenced.value;\n  }\n\n  if (circular && !directCircular && options.dereference.circular === \"ignore\") {\n    // The user has chosen to \"ignore\" circular references, so don't change the value\n    dereferencedValue = $ref;\n  }\n\n  if (directCircular) {\n    // The pointer is a DIRECT circular reference (i.e. it references itself).\n    // So replace the $ref path with the absolute path from the JSON Schema root\n    dereferencedValue.$ref = pathFromRoot;\n  }\n\n  const dereferencedObject = {\n    circular,\n    value: dereferencedValue\n  }; // only cache if no extra properties than $ref\n\n  if (Object.keys($ref).length === 1) {\n    dereferencedCache.set($refPath, dereferencedObject);\n  }\n\n  return dereferencedObject;\n}\n/**\n * Called when a circular reference is found.\n * It sets the {@link $Refs#circular} flag, and throws an error if options.dereference.circular is false.\n *\n * @param {string} keyPath - The JSON Reference path of the circular reference\n * @param {$Refs} $refs\n * @param {$RefParserOptions} options\n * @returns {boolean} - always returns true, to indicate that a circular reference was found\n */\n\n\nfunction foundCircularReference(keyPath, $refs, options) {\n  $refs.circular = true;\n\n  if (!options.dereference.circular) {\n    throw ono.reference(`Circular $ref pointer found at ${keyPath}`);\n  }\n\n  return true;\n}","map":{"version":3,"names":["$Ref","require","Pointer","ono","url","module","exports","dereference","parser","options","dereferenced","crawl","schema","$refs","_root$Ref","path","Set","Map","circular","value","obj","pathFromRoot","parents","processedObjects","dereferencedCache","result","has","ArrayBuffer","isView","add","isAllowed$Ref","dereference$Ref","key","Object","keys","keyPath","join","keyPathFromRoot","foundCircularReference","delete","$ref","$refPath","resolve","cache","get","refKeys","length","extraKeys","assign","pointer","_resolve","directCircular","dereferencedValue","dereferencedObject","set","reference"],"sources":["/Users/abdulmutaalazhar/Desktop/Folders/ensembleUi/schema-test1/node_modules/@apidevtools/json-schema-ref-parser/lib/dereference.js"],"sourcesContent":["\"use strict\";\n\nconst $Ref = require(\"./ref\");\nconst Pointer = require(\"./pointer\");\nconst { ono } = require(\"@jsdevtools/ono\");\nconst url = require(\"./util/url\");\n\nmodule.exports = dereference;\n\n/**\n * Crawls the JSON schema, finds all JSON references, and dereferences them.\n * This method mutates the JSON schema object, replacing JSON references with their resolved value.\n *\n * @param {$RefParser} parser\n * @param {$RefParserOptions} options\n */\nfunction dereference (parser, options) {\n  // console.log('Dereferencing $ref pointers in %s', parser.$refs._root$Ref.path);\n  let dereferenced = crawl(parser.schema, parser.$refs._root$Ref.path, \"#\", new Set(), new Set(), new Map(), parser.$refs, options);\n  parser.$refs.circular = dereferenced.circular;\n  parser.schema = dereferenced.value;\n}\n\n/**\n * Recursively crawls the given value, and dereferences any JSON references.\n *\n * @param {*} obj - The value to crawl. If it's not an object or array, it will be ignored.\n * @param {string} path - The full path of `obj`, possibly with a JSON Pointer in the hash\n * @param {string} pathFromRoot - The path of `obj` from the schema root\n * @param {Set<object>} parents - An array of the parent objects that have already been dereferenced\n * @param {Set<object>} processedObjects - An array of all the objects that have already been processed\n * @param {Map<string,object>} dereferencedCache - An map of all the dereferenced objects\n * @param {$Refs} $refs\n * @param {$RefParserOptions} options\n * @returns {{value: object, circular: boolean}}\n */\nfunction crawl (obj, path, pathFromRoot, parents, processedObjects, dereferencedCache, $refs, options) {\n  let dereferenced;\n  let result = {\n    value: obj,\n    circular: false\n  };\n\n  if (options.dereference.circular === \"ignore\" || !processedObjects.has(obj)) {\n    if (obj && typeof obj === \"object\" && !ArrayBuffer.isView(obj)) {\n      parents.add(obj);\n      processedObjects.add(obj);\n\n      if ($Ref.isAllowed$Ref(obj, options)) {\n        dereferenced = dereference$Ref(obj, path, pathFromRoot, parents, processedObjects, dereferencedCache, $refs, options);\n        result.circular = dereferenced.circular;\n        result.value = dereferenced.value;\n      }\n      else {\n        for (const key of Object.keys(obj)) {\n          let keyPath = Pointer.join(path, key);\n          let keyPathFromRoot = Pointer.join(pathFromRoot, key);\n          let value = obj[key];\n          let circular = false;\n\n          if ($Ref.isAllowed$Ref(value, options)) {\n            dereferenced = dereference$Ref(value, keyPath, keyPathFromRoot, parents, processedObjects, dereferencedCache, $refs, options);\n            circular = dereferenced.circular;\n            // Avoid pointless mutations; breaks frozen objects to no profit\n            if (obj[key] !== dereferenced.value) {\n              obj[key] = dereferenced.value;\n            }\n          }\n          else {\n            if (!parents.has(value)) {\n              dereferenced = crawl(value, keyPath, keyPathFromRoot, parents, processedObjects, dereferencedCache, $refs, options);\n              circular = dereferenced.circular;\n              // Avoid pointless mutations; breaks frozen objects to no profit\n              if (obj[key] !== dereferenced.value) {\n                obj[key] = dereferenced.value;\n              }\n            }\n            else {\n              circular = foundCircularReference(keyPath, $refs, options);\n            }\n          }\n\n          // Set the \"isCircular\" flag if this or any other property is circular\n          result.circular = result.circular || circular;\n        }\n      }\n\n      parents.delete(obj);\n    }\n  }\n\n  return result;\n}\n\n/**\n * Dereferences the given JSON Reference, and then crawls the resulting value.\n *\n * @param {{$ref: string}} $ref - The JSON Reference to resolve\n * @param {string} path - The full path of `$ref`, possibly with a JSON Pointer in the hash\n * @param {string} pathFromRoot - The path of `$ref` from the schema root\n * @param {Set<object>} parents - An array of the parent objects that have already been dereferenced\n * @param {Set<object>} processedObjects - An array of all the objects that have already been dereferenced\n * @param {Map<string,object>} dereferencedCache - An map of all the dereferenced objects\n * @param {$Refs} $refs\n * @param {$RefParserOptions} options\n * @returns {{value: object, circular: boolean}}\n */\nfunction dereference$Ref ($ref, path, pathFromRoot, parents, processedObjects, dereferencedCache, $refs, options) {\n  // console.log('Dereferencing $ref pointer \"%s\" at %s', $ref.$ref, path);\n\n  let $refPath = url.resolve(path, $ref.$ref);\n\n  const cache = dereferencedCache.get($refPath);\n  if (cache) {\n    const refKeys = Object.keys($ref);\n    if (refKeys.length > 1) {\n      const extraKeys = {};\n      for (let key of refKeys) {\n        if (key !== \"$ref\" && !(key in cache.value)) {\n          extraKeys[key] = $ref[key];\n        }\n      }\n      return {\n        circular: cache.circular,\n        value: Object.assign({}, cache.value, extraKeys),\n      };\n    }\n\n    return cache;\n  }\n\n\n  let pointer = $refs._resolve($refPath, path, options);\n\n  if (pointer === null) {\n    return {\n      circular: false,\n      value: null,\n    };\n  }\n\n  // Check for circular references\n  let directCircular = pointer.circular;\n  let circular = directCircular || parents.has(pointer.value);\n  circular && foundCircularReference(path, $refs, options);\n\n  // Dereference the JSON reference\n  let dereferencedValue = $Ref.dereference($ref, pointer.value);\n\n  // Crawl the dereferenced value (unless it's circular)\n  if (!circular) {\n    // Determine if the dereferenced value is circular\n    let dereferenced = crawl(dereferencedValue, pointer.path, pathFromRoot, parents, processedObjects, dereferencedCache, $refs, options);\n    circular = dereferenced.circular;\n    dereferencedValue = dereferenced.value;\n  }\n\n  if (circular && !directCircular && options.dereference.circular === \"ignore\") {\n    // The user has chosen to \"ignore\" circular references, so don't change the value\n    dereferencedValue = $ref;\n  }\n\n  if (directCircular) {\n    // The pointer is a DIRECT circular reference (i.e. it references itself).\n    // So replace the $ref path with the absolute path from the JSON Schema root\n    dereferencedValue.$ref = pathFromRoot;\n  }\n\n\n  const dereferencedObject = {\n    circular,\n    value: dereferencedValue\n  };\n\n  // only cache if no extra properties than $ref\n  if (Object.keys($ref).length === 1) {\n    dereferencedCache.set($refPath, dereferencedObject);\n  }\n\n  return dereferencedObject;\n}\n\n/**\n * Called when a circular reference is found.\n * It sets the {@link $Refs#circular} flag, and throws an error if options.dereference.circular is false.\n *\n * @param {string} keyPath - The JSON Reference path of the circular reference\n * @param {$Refs} $refs\n * @param {$RefParserOptions} options\n * @returns {boolean} - always returns true, to indicate that a circular reference was found\n */\nfunction foundCircularReference (keyPath, $refs, options) {\n  $refs.circular = true;\n  if (!options.dereference.circular) {\n    throw ono.reference(`Circular $ref pointer found at ${keyPath}`);\n  }\n  return true;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}